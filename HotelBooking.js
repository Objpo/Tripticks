import mongoose from "mongoose";

const HotelBookingSchema = new mongoose.Schema({
    // Th√¥ng tin ng∆∞·ªùi ƒë·∫∑t
    name: { type: String, required: true },
    email: { type: String, required: true },
    guests: { type: Number, required: true, min: 1 },
    date: {
        type: Date,
        required: [true, 'Ng√†y ƒë·∫∑t ph√≤ng l√† b·∫Øt bu·ªôc.'],
        validate: {
            validator: function (v) {
                // 1. L·∫•y ng√†y hi·ªán t·∫°i
                const now = new Date();
                // 2. ƒê·∫∑t gi·ªù, ph√∫t, gi√¢y, mili gi√¢y c·ªßa ng√†y hi·ªán t·∫°i v·ªÅ 0
                // ƒë·ªÉ ch·ªâ so s√°nh ng√†y (date)
                now.setHours(0, 0, 0, 0);

                // 3. L·∫•y ng√†y ƒë·∫∑t ph√≤ng t·ª´ input
                const bookingDate = new Date(v);
                // 4. ƒê·∫∑t gi·ªù, ph√∫t, gi√¢y, mili gi√¢y c·ªßa ng√†y ƒë·∫∑t ph√≤ng v·ªÅ 0
                bookingDate.setHours(0, 0, 0, 0);

                // 5. Ki·ªÉm tra: Ng√†y ƒë·∫∑t ph√≤ng ph·∫£i >= Ng√†y hi·ªán t·∫°i
                return bookingDate >= now;
            },
            message: props => `Ng√†y ƒë·∫∑t ph√≤ng (${props.value.toISOString().split('T')[0]}) kh√¥ng th·ªÉ l√† ng√†y trong qu√° kh·ª©! Vui l√≤ng ch·ªçn ng√†y hi·ªán t·∫°i ho·∫∑c t∆∞∆°ng lai.`
        }
    },

    // Th√¥ng tin ph√≤ng/kh√°ch s·∫°n (l·∫•y t·ª´ form)
    room_name: { type: String, required: true },
    hotel_id: { type: String, required: true }, // L·∫•y t·ª´ API /api/hotels

    // Tr·∫°ng th√°i
    booking_status: {
        type: String,
        required: true,
        default: "Pending"
    },
}, {
    timestamps: true,
    collection: 'hotel_bookings' // üí° Ch·ªâ ƒë·ªãnh r√µ t√™n collection
});

const HotelBooking = mongoose.models.HotelBooking || mongoose.model("HotelBooking", HotelBookingSchema);

export default HotelBooking;