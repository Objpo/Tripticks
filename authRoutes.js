import express from "express";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
// üí° L∆ØU √ù: Gi·∫£ ƒë·ªãnh b·∫°n ƒë√£ import User Model ·ªü ƒë√¢y
import User from "../models/User.js";

const router = express.Router();

// üí° ƒê√É S·ª¨A L·ªñI ƒê·ªäNH TUY·∫æN: Th√™m ti·ªÅn t·ªë /auth v√†o route
// Endpoint: POST /api/auth/signup
router.post("/auth/signup", async (req, res) => {
  try {
    const { username, email, password } = req.body;

    // ki·ªÉm tra tr√πng email
    const existingUser = await User.findOne({ email });
    if (existingUser)
      return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i!" });

    // m√£ ho√° m·∫≠t kh·∫©u
    const hashedPassword = await bcrypt.hash(password, 10);

    const newUser = new User({
      username,
      email,
      password: hashedPassword,
    });
    await newUser.save();

    res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng!" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
});

// üí° ƒê√É S·ª¨A L·ªñI ƒê·ªäNH TUY·∫æN: Th√™m ti·ªÅn t·ªë /auth v√†o route
// Endpoint: POST /api/auth/login
router.post("/auth/login", async (req, res) => {
  try {
    const { email, password } = req.body;

    const user = await User.findOne({ email });
    if (!user)
      return res.status(400).json({ message: "Sai email ho·∫∑c m·∫≠t kh·∫©u!" });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch)
      return res.status(400).json({ message: "Sai email ho·∫∑c m·∫≠t kh·∫©u!" });

    // t·∫°o token JWT
    const token = jwt.sign(
      { id: user._id, username: user.username },
      process.env.JWT_SECRET || "mysecret",
      { expiresIn: "2h" }
    );

    res.json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
      token,
      user: { id: user._id, username: user.username, email: user.email },
    });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
});


// üí° ƒê√É S·ª¨A L·ªñI ƒê·ªäNH TUY·∫æN: Th√™m ti·ªÅn t·ªë /auth v√†o route
// Endpoint: GET /api/auth/profile
router.get("/auth/profile", async (req, res) => {
  try {
    // L·∫•y token t·ª´ header Authorization: "Bearer <token>"
    const token = req.headers.authorization?.split(" ")[1];
    if (!token) return res.status(401).json({ message: "Kh√¥ng c√≥ token!" });

    // Gi·∫£i m√£ token
    const decoded = jwt.verify(token, process.env.JWT_SECRET || "mysecret");

    // T√¨m ng∆∞·ªùi d√πng trong DB
    const user = await User.findById(decoded.id).select("-password");
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });

    res.json(user);
  } catch (err) {
    console.error(err);
    res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá!" });
  }
});

export default router;
