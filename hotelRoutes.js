import express from "express";
import Hotel from "../models/Hotel.js";

const router = express.Router();

// -------------------------------------------------------------------
// 1. L·∫§Y T·∫§T C·∫¢ C√ÅC PH√íNG (ƒê√É "L√ÄM GI√ÄU" DATA)
// -------------------------------------------------------------------
router.get("/hotels", async (req, res, next) => {
    try {
        const hotels = await Hotel.find();
        if (!hotels || hotels.length === 0) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y kh√°ch s·∫°n n√†o." });
        }

        // Bi·∫øn ƒë·ªïi d·ªØ li·ªáu: G·∫Øn th√¥ng tin c·ªßa kh√°ch s·∫°n m·∫π v√†o t·ª´ng ph√≤ng
        const allRooms = hotels.flatMap(hotel => {
            // L·∫•y th√¥ng tin chung c·ªßa kh√°ch s·∫°n
            const hotelInfo = {
                hotel_id: hotel._id,
                country: hotel.country,
                hotel_img: hotel.img,
                // üí° ƒê√É TH√äM: hotel_name cho Route 1
                hotel_name: hotel.hotel_name
            };
            // Map qua m·∫£ng 'rooms' c·ªßa kh√°ch s·∫°n n√†y
            return hotel.rooms.map(room => {
                const roomObject = room.toObject ? room.toObject() : { ...room };
                // G·ªôp th√¥ng tin ph√≤ng v√† th√¥ng tin kh√°ch s·∫°n l·∫°i
                return {
                    ...roomObject,
                    ...hotelInfo
                };
            });
        });

        res.json(allRooms); // G·ª≠i m·∫£ng ph√≤ng ƒë√£ ƒë∆∞·ª£c "l√†m gi√†u" th√¥ng tin

    } catch (err) {
        console.error("L·ªói khi l·∫•y danh s√°ch kh√°ch s·∫°n:", err.stack);
        next(err); // Chuy·ªÉn l·ªói cho middleware x·ª≠ l√Ω
    }
});

// -------------------------------------------------------------------
// 2. L·∫§Y CHI TI·∫æT M·ªòT KH√ÅCH S·∫†N (THEO ID KH√ÅCH S·∫†N)
// (Route n√†y ph·∫£i ƒë·∫∑t TR∆Ø·ªöC route /country/:country)
// -------------------------------------------------------------------
router.get("/hotels/:id", async (req, res, next) => {
    try {
        const hotel = await Hotel.findById(req.params.id);
        if (!hotel) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y kh√°ch s·∫°n." });
        }
        res.status(200).json(hotel); // Tr·∫£ v·ªÅ to√†n b·ªô object kh√°ch s·∫°n
    } catch (err) {
        next(err);
    }
});

// -------------------------------------------------------------------
// 3. L·∫§Y C√ÅC PH√íNG THEO QU·ªêC GIA (ƒê√É S·ª¨A L·ªñI LOGIC)
// -------------------------------------------------------------------
router.get("/hotels/country/:country", async (req, res, next) => {
    try {
        const countryName = req.params.country;
        const hotels = await Hotel.find({ country: new RegExp(countryName, "i") });

        console.log(`D·ªØ li·ªáu th√¥ t·ª´ Hotel.find() cho ${countryName}:`, hotels);

        if (!hotels || hotels.length === 0) {
            return res.status(404).json({ message: `Kh√¥ng t√¨m th·∫•y kh√°ch s·∫°n n√†o ·ªü ${countryName}.` });
        }

        // ƒê√É C√ì: √ÅP D·ª§NG LOGIC "L√ÄM GI√ÄU" DATA Y H·ªÜT NH∆Ø ROUTE /hotels
        const roomsByCountry = hotels.flatMap(hotel => {
            const hotelInfo = {
                hotel_id: hotel._id,
                country: hotel.country,
                hotel_img: hotel.img,
                hotel_name: hotel.hotel_name
            };
            return hotel.rooms.map(room => {
                const roomObject = room.toObject ? room.toObject() : { ...room };
                return { ...roomObject, ...hotelInfo };
            });
        });

        res.json(roomsByCountry); // Tr·∫£ v·ªÅ m·∫£ng ph√≤ng ƒë√£ "l√†m gi√†u"

    } catch (err) {
        console.error(`L·ªói khi l·∫•y kh√°ch s·∫°n ·ªü ${req.params.country}:`, err);
        next(err); // D√πng next(err) cho nh·∫•t qu√°n
    }
});

// -------------------------------------------------------------------
// 4. L·∫§Y CHI TI·∫æT M·ªòT PH√íNG (THEO ID KH√ÅCH S·∫†N V√Ä INDEX)
// -------------------------------------------------------------------
router.get("/hotels/:id/hotel/:index", async (req, res, next) => {
    try {
        const hotel = await Hotel.findById(req.params.id);
        console.log(`D·ªØ li·ªáu th√¥ t·ª´ Hotel.findById(${req.params.id}):`, hotel);

        if (!hotel || !hotel.rooms || !hotel.rooms[req.params.index]) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y kh√°ch s·∫°n ho·∫∑c index." });
        }
        res.json(hotel.rooms[req.params.index]);
    } catch (err) {
        console.error(`L·ªói khi l·∫•y kh√°ch s·∫°n v·ªõi ID ${req.params.id} v√† index ${req.params.index}:`, err);
        next(err);
    }
});

export default router;